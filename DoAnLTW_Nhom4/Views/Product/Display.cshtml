@model DoAnLTW_Nhom4.Models.Product

@{
    ViewData["Title"] = "Chi tiết sản phẩm";
    Layout = "_LayoutProduct";
}
<link rel="stylesheet" href="~/css/productDetail.css" asp-append-version="true" />

<div class="product-detail-page">
    <h1 class="page-title">Chi tiết sản phẩm</h1>
    <div class="product-layout">
        <!-- Ảnh chính và Gallery -->
        <div class="image-section">
            <img id="mainImage" src="@Model.ImageUrl" class="main-image" alt="@Model.Name" />

            @if (Model.ImageUrls != null && Model.ImageUrls.Any())
            {
                <div class="image-gallery">
                    @foreach (var image in Model.ImageUrls)
                    {
                        <img src="@image.ImageUrl" class="thumbnail" alt="@Model.Name" onclick="changeMainImage(this)" />
                    }
                </div>
            }
        </div>
        <!-- Thông tin sản phẩm -->
        <div class="info-section">
            <dl class="row">
                <dt class="col-sm-4">Tên sản phẩm</dt>
                <dd class="col-sm-8">@Model.Name</dd>

                <dt class="col-sm-4">Giá</dt>
                <dd class="col-sm-8" style="text-decoration: line-through;font-size: 0.7rem;">@Model.Price.ToString("N0") đ</dd>

                <dt class="col-sm-4">Giá khuyến mãi</dt>
                <dd class="col-sm-8">@((Model.Price * (1 - Model.Discount / 100))?.ToString("N0"))đ</dd>

                <dt class="col-sm-4">Số lượng hàng</dt>
                <dd class="col-sm-8">@Model.Stock</dd>

                <dt class="col-sm-4">Thương hiệu</dt>
                <dd class="col-sm-8">@(Model.Brand?.Name ?? "<span class='text-muted'>Chưa có</span>")</dd>

                <dt class="col-sm-4">Mô tả</dt>
                <dd class="col-sm-8">@Html.Raw(Model.Description)</dd>
            </dl>
            <div class="button-container">
                <button class="btn add-to-cart-btn" data-product-id="@Model.Id">Thêm vào giỏ hàng
                    <i class="fas fa-shopping-cart"></i>
                </button>
                <a asp-action="Index" class="btn back-btn">Quay lại danh sách</a>
            </div>
        </div>
    </div>

    <!-- Thông số kỹ thuật -->
    <div class="specifications-section">
        <h3 class="specifications-title">Thông số kỹ thuật</h3>
        @if (Model.ProductSpecifications != null && Model.ProductSpecifications.Any())
        {
            <table class="specifications-table">
                <thead>
                    <tr>
                        <th>Tên thông số</th>
                        <th>Giá trị</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var spec in Model.ProductSpecifications)
                    {
                        <tr>
                            <td>@spec.Key</td>
                            <td>@spec.Value</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p class="text-muted">Không có thông số kỹ thuật nào.</p>
        }
    </div>
    <section class="product-section">
        <div class="section-header">
            <h2>Sản phẩm bán chạy</h2>
            <a href="#" class="view-all">Xem tất cả</a>
        </div>
        <div class="product-row-container">
            <button class="scroll-btn scroll-left" aria-label="Scroll left">
                <i class="fas fa-chevron-left"></i>
            </button>
            <div class="product-row">
                @await Component.InvokeAsync("ProductDisplay", new { type = "bestseller", count = 8 })
            </div>
            <button class="scroll-btn scroll-right" aria-label="Scroll right">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </section>
    <section class="product-section">
        <div class="section-header">
            <h2>Sản phẩm nổi bật</h2>
            <a href="#" class="view-all">Xem tất cả</a>
        </div>
        <div class="product-row-container">
            <button class="scroll-btn scroll-left" aria-label="Scroll left">
                <i class="fas fa-chevron-left"></i>
            </button>
            <div class="product-row">
                @await Component.InvokeAsync("ProductDisplay", new { type = "featured", count = 8 })
            </div>
            <button class="scroll-btn scroll-right" aria-label="Scroll right">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </section>
    <!-- Hiển thị đánh giá -->
    <div id="reviews-container">
        @await Html.PartialAsync("_ReviewList", Model.Reviews)
    </div>

    <!-- Form thêm đánh giá -->
    <div class="review-form">
        <h3>Viết đánh giá</h3>
        <form id="reviewForm">
            <input type="hidden" name="ProductId" value="@Model.Id" />
            <input type="text" name="UserName" placeholder="Tên của bạn" required />
            <select name="Rating">
                <option value="5">⭐⭐⭐⭐⭐ - Rất tốt</option>
                <option value="4">⭐⭐⭐⭐ - Tốt</option>
                <option value="3">⭐⭐⭐ - Trung bình</option>
                <option value="2">⭐⭐ - Kém</option>
                <option value="1">⭐ - Rất kém</option>
            </select>
            <textarea name="Comment" placeholder="Viết nhận xét của bạn" required></textarea>
            <button type="submit">Gửi đánh giá</button>
        </form>
    </div>


</div>

@section Scripts {
    <script>
        function changeMainImage(thumbnail) {
            var mainImage = document.getElementById("mainImage");
            if (mainImage) {
                mainImage.src = thumbnail.src;
            }
        }
    </script>
    <script>
        $(document).ready(function() {
            $("#reviewForm").submit(function(e) {
                e.preventDefault();
                $.post("/Review/AddReview", $(this).serialize(), function(response) {
                    alert(response.message);
                    $("#reviewForm")[0].reset();
                });
            });
        });
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add to cart functionality
            document.querySelectorAll('.add-to-cart-btn').forEach(button => {
                button.addEventListener('click', async function(e) {
                    e.preventDefault();
                    const productId = this.dataset.productId;
                    try {
                        const response = await fetch('/ShoppingCart/AddToCart', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                productId: parseInt(productId),
                                quantity: 1
                            })
                        });

                        const result = await response.json();
                        if (result.success) {
                            // Show success message
                            const toast = document.createElement('div');
                            toast.className = 'toast success';
                            toast.textContent = result.message;
                            document.body.appendChild(toast);
                            setTimeout(() => toast.remove(), 3000);
                        } else {
                            // Show error message
                            const toast = document.createElement('div');
                            toast.className = 'toast error';
                            toast.textContent = result.message;
                            document.body.appendChild(toast);
                            setTimeout(() => toast.remove(), 3000);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        // Show error message
                        const toast = document.createElement('div');
                        toast.className = 'toast error';
                        toast.textContent = 'Có lỗi xảy ra khi thêm vào giỏ hàng';
                        document.body.appendChild(toast);
                        setTimeout(() => toast.remove(), 3000);
                    }
                });
            });

            // Horizontal scroll for product rows
            document.querySelectorAll('.product-row-container').forEach(container => {
                const row = container.querySelector('.product-row');
                const leftBtn = container.querySelector('.scroll-left');
                const rightBtn = container.querySelector('.scroll-right');

                // Ẩn nút scroll khi không cần thiết
                const updateScrollButtons = () => {
                    leftBtn.style.display = row.scrollLeft > 0 ? 'flex' : 'none';
                    rightBtn.style.display = row.scrollLeft < (row.scrollWidth - row.clientWidth) ? 'flex' : 'none';
                };

                row.addEventListener('scroll', updateScrollButtons);
                window.addEventListener('resize', updateScrollButtons);
                updateScrollButtons(); // Kiểm tra trạng thái ban đầu

                leftBtn.addEventListener('click', () => {
                    row.scrollBy({
                        left: -300,
                        behavior: 'smooth'
                    });
                });

                rightBtn.addEventListener('click', () => {
                    row.scrollBy({
                        left: 300,
                        behavior: 'smooth'
                    });
                });
            });
        });

    </script>
}