@{
    ViewData["Title"] = "Trang chủ";
}
<!-- Kết quả tìm kiếm -->
<h2 id="search-title" style="display: none;">Kết quả tìm kiếm</h2>
<section class="product-filter" id="product-container">
</section>

<!-- Latest Products Section -->
<section class="product-section">
    <div class="section-header">
        <h2><i class="fas fa-clock"></i> Sản phẩm mới nhất</h2>
        <a asp-controller="Product" asp-action="Index" class="view-all">Xem tất cả <i class="fas fa-arrow-right"></i></a>
    </div>
    
    <div class="product-row-container">
        <button class="scroll-btn scroll-left" aria-label="Scroll left">
            <i class="fas fa-chevron-left"></i>
        </button>
        <div class="product-row">
            @await Component.InvokeAsync("ProductDisplay", new { type = "latest", count = 8 })
        </div>
        <button class="scroll-btn scroll-right" aria-label="Scroll right">
            <i class="fas fa-chevron-right"></i>
        </button>
    </div>
</section>

<!-- Best Sellers Section -->
<section class="product-section">
    <div class="section-header">
        <h2><i class="fas fa-fire"></i> Sản phẩm bán chạy</h2>
        <a asp-controller="Product" asp-action="Index" class="view-all">Xem tất cả <i class="fas fa-arrow-right"></i></a>
    </div>
    
    <div class="product-row-container">
        <button class="scroll-btn scroll-left" aria-label="Scroll left">
            <i class="fas fa-chevron-left"></i>
        </button>
        <div class="product-row">
            @await Component.InvokeAsync("ProductDisplay", new { type = "bestsellers", count = 8 })
        </div>
        <button class="scroll-btn scroll-right" aria-label="Scroll right">
            <i class="fas fa-chevron-right"></i>
        </button>
    </div>
</section>

<!-- Categories Section -->
<section class="categories">
    <div class="section-header">
        <h2><i class="fas fa-list"></i> Danh mục sản phẩm</h2>
        <a asp-controller="Category" asp-action="Index" class="view-all">Xem tất cả <i class="fas fa-arrow-right"></i></a>
    </div>
    
    <div class="category-grid">
        @await Component.InvokeAsync("CategoryList")
    </div>
</section>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add to cart functionality
            document.querySelectorAll('.add-to-cart-btn').forEach(button => {
                button.addEventListener('click', async function(e) {
                    e.preventDefault();
                    const productId = this.dataset.productId;
                    try {
                        const response = await fetch('/ShoppingCart/AddToCart', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                productId: parseInt(productId),
                                quantity: 1
                            })
                        });
                        
                        const result = await response.json();
                        if (result.success) {
                            // Show success message
                            const toast = document.createElement('div');
                            toast.className = 'toast success';
                            toast.textContent = result.message;
                            document.body.appendChild(toast);
                            setTimeout(() => toast.remove(), 3000);
                        } else {
                            // Show error message
                            const toast = document.createElement('div');
                            toast.className = 'toast error';
                            toast.textContent = result.message;
                            document.body.appendChild(toast);
                            setTimeout(() => toast.remove(), 3000);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        // Show error message
                        const toast = document.createElement('div');
                        toast.className = 'toast error';
                        toast.textContent = 'Có lỗi xảy ra khi thêm vào giỏ hàng';
                        document.body.appendChild(toast);
                        setTimeout(() => toast.remove(), 3000);
                    }
                });
            });

            // Horizontal scroll for product rows
            document.querySelectorAll('.product-row-container').forEach(container => {
                const row = container.querySelector('.product-row');
                const leftBtn = container.querySelector('.scroll-left');
                const rightBtn = container.querySelector('.scroll-right');

                // Ẩn nút scroll khi không cần thiết
                const updateScrollButtons = () => {
                    leftBtn.style.display = row.scrollLeft > 0 ? 'flex' : 'none';
                    rightBtn.style.display = row.scrollLeft < (row.scrollWidth - row.clientWidth) ? 'flex' : 'none';
                };

                row.addEventListener('scroll', updateScrollButtons);
                window.addEventListener('resize', updateScrollButtons);
                updateScrollButtons(); // Kiểm tra trạng thái ban đầu

                leftBtn.addEventListener('click', () => {
                    row.scrollBy({
                        left: -300,
                        behavior: 'smooth'
                    });
                });

                rightBtn.addEventListener('click', () => {
                    row.scrollBy({
                        left: 300,
                        behavior: 'smooth'
                    });
                });
            });
        });
    </script>
}

